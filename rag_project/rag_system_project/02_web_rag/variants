#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
RAGシステムのWebインターフェース（デバッグ版）
"""
import os
import json
import traceback
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask, request, jsonify, render_template

# .envファイルから環境変数を読み込み
load_dotenv()

app = Flask(__name__, static_folder="static", template_folder="templates")

# グローバル変数
rag = None
rag_initialized = False
initialization_error = None

def safe_initialize_rag():
    """安全なRAGシステム初期化"""
    global rag, rag_initialized, initialization_error
    
    if rag_initialized:
        return rag is not None
    
    try:
        print("🔧 RAGシステム初期化開始...")
        
        # 段階的インポート
        print("  📦 モジュールインポート中...")
        from rag_system import RAGSystem
        from config import Config
        print("  ✅ インポート完了")
        
        # APIキー確認
        print("  🔑 APIキー確認中...")
        api_key = Config.GOOGLE_API_KEY
        if not api_key:
            initialization_error = "APIキーが設定されていません"
            print(f"  ❌ {initialization_error}")
            rag_initialized = True
            return False
        print(f"  ✅ APIキー確認完了: {api_key[:10]}...")
        
        # RAGインスタンス作成
        print("  🏗️  RAGインスタンス作成中...")
        rag = RAGSystem()
        print("  ✅ RAGインスタンス作成完了")
        
        # データベース初期化（タイムアウト付き）
        print("  🗄️  データベース初期化中...")
        db_success = rag.initialize_database()
        if db_success:
            print("  ✅ データベース初期化完了")
            rag_initialized = True
            return True
        else:
            initialization_error = "データベース初期化失敗"
            print(f"  ❌ {initialization_error}")
            rag_initialized = True
            return False
            
    except Exception as e:
        initialization_error = f"初期化エラー: {str(e)}"
        print(f"  ❌ {initialization_error}")
        print(f"  📋 詳細: {traceback.format_exc()}")
        rag_initialized = True
        return False

@app.route('/')
def index():
    """メインページ"""
    try:
        return render_template('index.html')
    except Exception as e:
        # テンプレートが見つからない場合のフォールバック
        return f"""
        <!DOCTYPE html>
        <html lang="ja">
        <head>
            <meta charset="UTF-8">
            <title>RAG System</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .container {{ max-width: 800px; margin: 0 auto; }}
                .error {{ background: #f8d7da; border: 1px solid #f5c6cb; padding: 20px; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>RAG System</h1>
                <div class="error">
                    <h2>テンプレートエラー</h2>
                    <p>テンプレートファイルが見つかりません: {str(e)}</p>
                    <p>基本的な機能は以下のAPIエンドポイントで利用できます：</p>
                    <ul>
                        <li><code>/api/status</code> - システム状態確認</li>
                        <li><code>/api/add_document</code> - 文書追加</li>
                        <li><code>/api/ask</code> - 質問応答</li>
                    </ul>
                </div>
            </div>
        </body>
        </html>
        """

@app.route('/api/status')
def api_status():
    """システム状態確認"""
    try:
        print("📊 システム状態確認リクエスト")
        
        # 初期化状態を確認
        is_ready = safe_initialize_rag()
        
        status = {
            "status": "ready" if is_ready else "error",
            "rag_initialized": rag_initialized,
            "error": initialization_error,
            "timestamp": datetime.now().isoformat(),
            "api_key_set": bool(os.getenv('GOOGLE_API_KEY'))
        }
        
        if is_ready and rag:
            try:
                status["document_count"] = rag.get_document_count()
            except Exception as e:
                status["document_count_error"] = str(e)
        
        print(f"📊 システム状態: {status['status']}")
        return jsonify(status)
        
    except Exception as e:
        error_status = {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }
        print(f"❌ システム状態確認エラー: {e}")
        return jsonify(error_status), 500

@app.route('/api/add_document', methods=['POST'])
def add_document():
    """文書追加"""
    try:
        print("📄 文書追加リクエスト")
        
        if not safe_initialize_rag():
            return jsonify({
                "success": False,
                "error": initialization_error or "RAGシステム未初期化"
            }), 500
        
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "JSONデータが必要です"}), 400
        
        title = data.get('title', '').strip()
        content = data.get('content', '').strip()
        metadata = data.get('metadata', {})
        
        if not title or not content:
            return jsonify({"success": False, "error": "タイトルと内容は必須です"}), 400
        
        print(f"📄 文書追加: {title}")
        success = rag.add_document(title, content, metadata)
        
        if success:
            print(f"✅ 文書追加成功: {title}")
            return jsonify({"success": True, "message": "文書が正常に追加されました"})
        else:
            print(f"❌ 文書追加失敗: {title}")
            return jsonify({"success": False, "error": "文書の追加に失敗しました"}), 500
    
    except Exception as e:
        print(f"❌ 文書追加エラー: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/ask', methods=['POST'])
def ask_question():
    """質問応答"""
    try:
        print("❓ 質問応答リクエスト")
        
        if not safe_initialize_rag():
            return jsonify({
                "success": False,
                "error": initialization_error or "RAGシステム未初期化"
            }), 500
        
        data = request.get_json()
        if not data:
            return jsonify({"success": False, "error": "JSONデータが必要です"}), 400
        
        question = data.get('question', '').strip()
        if not question:
            return jsonify({"success": False, "error": "質問は必須です"}), 400
        
        print(f"❓ 質問: {question}")
        
        # 関連文書検索
        similar_docs = rag.search_similar_documents(question, top_k=3)
        print(f"🔍 関連文書数: {len(similar_docs)}")
        
        # 回答生成
        answer = rag.answer_question(question)
        print(f"✅ 回答生成完了")
        
        return jsonify({
            "success": True,
            "answer": answer,
            "related_documents": similar_docs
        })
    
    except Exception as e:
        print(f"❌ 質問応答エラー: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/test')
def test_page():
    """テストページ"""
    return """
    <!DOCTYPE html>
    <html lang="ja">
    <head>
        <meta charset="UTF-8">
        <title>RAG System Test</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            .success { background: #d4edda; padding: 20px; border-radius: 5px; margin: 20px 0; }
            button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
            #result { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; white-space: pre-wrap; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="success">
                <h1>🎉 RAG System テストページ</h1>
                <p>Webアプリケーションが正常に動作しています！</p>
            </div>
            
            <h2>🧪 API テスト</h2>
            <button onclick="testStatus()">システム状態確認</button>
            <button onclick="testAddDocument()">文書追加テスト</button>
            <button onclick="testQuestion()">質問応答テスト</button>
            
            <div id="result">ここに結果が表示されます</div>
        </div>
        
        <script>
        async function testStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                document.getElementById('result').textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                document.getElementById('result').textContent = 'エラー: ' + error.message;
            }
        }
        
        async function testAddDocument() {
            try {
                const response = await fetch('/api/add_document', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        title: 'テスト文書',
                        content: 'これはWebアプリケーションからのテスト文書です。',
                        metadata: {source: 'web_test'}
                    })
                });
                const data = await response.json();
                document.getElementById('result').textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                document.getElementById('result').textContent = 'エラー: ' + error.message;
            }
        }
        
        async function testQuestion() {
            try {
                const response = await fetch('/api/ask', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        question: 'テスト文書について教えてください'
                    })
                });
                const data = await response.json();
                document.getElementById('result').textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                document.getElementById('result').textContent = 'エラー: ' + error.message;
            }
        }
        </script>
    </body>
    </html>
    """

if __name__ == '__main__':
    print("=" * 60)
    print("🚀 RAG System Webアプリケーション (デバッグ版)")
    print("=" * 60)
    
    # 環境確認
    print(f"📁 作業ディレクトリ: {os.getcwd()}")
    print(f"🔑 API Key: {'設定済み' if os.getenv('GOOGLE_API_KEY') else '未設定'}")
    print(f"📁 テンプレートフォルダ: {os.path.exists('templates')}")
    print(f"📄 index.htmlファイル: {os.path.exists('templates/index.html')}")
    
    port = 5000
    print(f"🌐 起動URL: http://localhost:{port}")
    print(f"🧪 テストページ: http://localhost:{port}/test")
    print("=" * 60)
    
    # フラスクの起動
    app.run(host='127.0.0.1', port=port, debug=True, use_reloader=False)
