name: RAG System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rag_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pgvector extension
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-15-pgvector
        PGPASSWORD=postgres psql -h localhost -U postgres -d rag_db_test -c "CREATE EXTENSION IF NOT EXISTS vector;"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask
    
    - name: Set up environment variables
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_DB=rag_db_test" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}" >> .env
        echo "FLASK_ENV=testing" >> .env
    
    - name: Initialize database
      run: |
        python -c "from db_utils import create_tables; create_tables()"
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test web application startup
      run: |
        timeout 10s python web_app.py &
        sleep 5
        curl -f http://localhost:5000 || exit 1

  deploy-docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Generate documentation
      run: |
        mkdir -p docs
        cp PROJECT_STATUS.md docs/
        cp WORK_LOG_DELETE_FUNCTION.md docs/
        echo "# RAG System Documentation" > docs/index.md
        echo "" >> docs/index.md
        echo "## Available Documentation" >> docs/index.md
        echo "- [Project Status](PROJECT_STATUS.md)" >> docs/index.md
        echo "- [Delete Function Work Log](WORK_LOG_DELETE_FUNCTION.md)" >> docs/index.md
    
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/
    
    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v2
